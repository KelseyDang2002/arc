1. What is an API?
UI         ->   api endpoints   <-   Backend
(Front End)                           (Server Side)

API
Endpoints
JSON contracts between UI and backend

E.g. https://api.twitter.com/getTweets

Public (anyone with valid credentials can use it):
    Google Maps API
    Twitter API
    Weather API -> no need for registration
    we can plug these into our applications

Private (protected, we cannot access them over the internet freely):
    xyz.com/api/getUsers
        protected, certain username/passwords

Hello World!
    http://localhost:4000/getUsers
        endpoint name: getUsers
        port: 4000
        domain name: 
        http or https:
            https is secured

3. ExpressJS backend or frontend?
    Node JS -> server side scripting using Javascript
    Express JS is built on top of it
    Express JS is a backend framework
        server side
    Express JS makes it easy to code at high level
    Node is like going low level fundamental programming

6. POSTMAN tool
    95% of the world companies use POSTMAN tool for testing APIs
    It's free distribution
    Really powerful tool and a lot og things for testing APIs

CRUD
    Create - create new resource
    Read - read resource from server
    Update - update a resource
    Delete - delete a resource

HTTP Methods
    POST - posting data from UI to server
    GET - requesting data from server
    PUT - update or modification of data
    DELETE - deleting a resource based on a criteria or condition

Routing
    a route is a section of Express code that associates an HTTP verb (GET, POST, etc.)
    a URL path/pattern, and a function that is called to handle that pattern
    Examples of Routes:
        app.post('/create')
        app.get('/users')
        app.put('/user/update')
        app.delete('/user/delete')

Dynamic Routes
    build URLs dynamically
    pass parameters with colon and a variable (E.g., '/:id')
    nodemon auto restarts node server if there are any changes
    pattern matching using regular expressions (regex)
    wild card routes, error handling

Express JS as Middleware
    Middleware functions are functions that have access to the request object (req),
    response object (res), and the next middleware function in the application's
    request-response cycle

    UI -> Request -> API -> Middleware -> Handler

    1. Security check of user's token/access/auth
    2. Body parsing of the request
    3. Sanitizing data
    4. Logged - most common use case

    It's just methods/functions
    Ordering of the methods is the MOST crucial thing
